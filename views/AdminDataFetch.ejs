<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard: Student Details</title>
    <link rel="shortcut icon"
        href="https://ik.imagekit.io/7de5cntkw/1692626704665-photoaidcom-cropped%20(1).jpeg?updatedAt=1738048156918"
        type="image/x-icon">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        * {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: #f4f7fa;
            color: #1e2a44;
            min-height: 100vh;
            display: flex;
            overflow-x: hidden;
        }

        .sidebar {
            width: 240px;
            background: #1e2a44;
            color: #ffffff;
            height: 100vh;
            position: fixed;
            top: 0;
            left: 0;
            padding: 24px;
            display: flex;
            flex-direction: column;
            gap: 16px;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.05);
        }

        .sidebar .logo {
            font-size: 22px;
            font-weight: 800;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .sidebar .logo img {
            width: 36px;
            height: 36px;
            border-radius: 8px;
        }

        .sidebar nav {
            flex: 1;
            margin-top: 24px;
        }

        .sidebar nav a {
            display: block;
            color: #a0aec0;
            text-decoration: none;
            padding: 12px 16px;
            font-size: 14px;
            font-weight: 500;
            border-radius: 6px;
            transition: background 0.2s ease, color 0.2s ease;
        }

        .sidebar nav a:hover,
        .sidebar nav a.active {
            background: #3b82f6;
            color: #ffffff;
        }

        .main-content {
            flex: 1;
            margin-left: 240px;
            padding: 24px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            overflow: hidden;
        }

        .header {
            background: #ffffff;
            padding: 20px 24px;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            font-size: 22px;
            font-weight: 700;
            color: #1e2a44;
        }

        .search-bar {
            padding: 20px 24px;
            background: #f9fafb;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .search-bar label {
            font-size: 14px;
            font-weight: 600;
            color: #1e2a44;
            margin-right: 12px;
        }

        .search-bar .search-input-container {
            display: flex;
            align-items: center;
            max-width: 400px;
            flex: 1;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            background: #ffffff;
            overflow: hidden;
            transition: box-shadow 0.2s ease;
        }

        .search-bar .search-input-container:focus-within {
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .search-bar input[type="text"] {
            flex: 1;
            padding: 12px 16px;
            border: none;
            font-size: 14px;
            background: transparent;
        }

        .search-bar input[type="text"]:focus {
            outline: none;
        }

        .search-bar input[type="text"]::placeholder {
            color: #9ca3af;
        }

        .search-bar button {
            padding: 12px 16px;
            background: #3b82f6;
            color: #ffffff;
            border: none;
            border-radius: 0 8px 8px 0;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: background 0.2s ease;
        }

        .search-bar button:hover {
            background: #1e3a8a;
        }

        #user-details {
            padding: 24px;
            display: none;
            background: #ffffff;
        }

        .excel-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            font-size: 14px;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            overflow: hidden;
            background: #ffffff;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .excel-table th,
        .excel-table td {
            padding: 14px 16px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        .excel-table th {
            background: #1e2a44;
            color: #ffffff;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 12px;
            letter-spacing: 0.5px;
        }

        .excel-table td {
            color: #1e2a44;
            font-weight: 500;
        }

        .excel-table tr:last-child td {
            border-bottom: none;
        }

        .excel-table tr:hover td {
            background: #e3f2fd;
            transition: background 0.2s ease;
        }

        .payment-history {
            margin-top: 24px;
            padding: 20px;
            background: #ffffff;
            border-radius: 10px;
            border: 1px solid #e2e8f0;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .payment-history h3 {
            font-size: 18px;
            color: #1e2a44;
            margin-bottom: 16px;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .payment-history ul {
            list-style: none;
        }

        .payment-history li {
            padding: 12px 16px;
            border-bottom: 1px solid #e2e8f0;
            color: #374151;
            font-size: 14px;
            display: flex;
            align-items: center;
            transition: background 0.2s ease;
        }

        .payment-history li:hover {
            background: #f0f9ff;
        }

        .payment-history li::before {
            content: 'â€¢';
            color: #3b82f6;
            margin-right: 12px;
            font-size: 18px;
        }

        .payment-history li:last-child {
            border-bottom: none;
        }

        .error,
        .success-message {
            padding: 14px;
            border-radius: 8px;
            margin: 16px 0;
            text-align: center;
            font-size: 14px;
            font-weight: 500;
            animation: fadeIn 0.3s ease;
        }

        .error {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #dc2626;
        }

        .success-message {
            background: #e7f3e6;
            color: #15803d;
            border: 1px solid #15803d;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .button-container {
            padding: 20px 24px;
            background: #f9fafb;
            border-top: 1px solid #e2e8f0;
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        .download-btn,
        .update-btn,
        .save-btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            background: #3b82f6;
            color: #ffffff;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: background 0.2s ease, transform 0.1s ease;
        }

        .download-btn:hover,
        .update-btn:hover,
        .save-btn:hover {
            background: #1e3a8a;
            transform: translateY(-1px);
        }

        .editable-input {
            width: 100%;
            padding: 10px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 14px;
            background: #ffffff;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

        .editable-input:focus {
            border-color: #3b82f6;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
            outline: none;
        }

        .input-error {
            border-color: #dc2626;
            background: #fef2f2;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }

        .modal-content {
            background: #ffffff;
            padding: 24px;
            border-radius: 12px;
            max-width: 400px;
            width: 90%;
            text-align: center;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            animation: slideIn 0.3s ease;
        }

        .modal-content h3 {
            font-size: 18px;
            color: #1e2a44;
            margin-bottom: 16px;
        }

        .modal-content p {
            font-size: 14px;
            color: #374151;
            margin-bottom: 24px;
        }

        .modal-content button {
            padding: 10px 20px;
            background: #3b82f6;
            color: #ffffff;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
            transition: background 0.2s ease;
        }

        .modal-content button:hover {
            background: #1e3a8a;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 200px;
            }

            .main-content {
                margin-left: 200px;
            }

            .container {
                border-radius: 8px;
            }

            .header h1 {
                font-size: 20px;
            }

            .search-bar {
                flex-direction: column;
                align-items: flex-start;
            }

            .search-bar .search-input-container {
                max-width: 100%;
                width: 100%;
            }

            .excel-table th,
            .excel-table td {
                font-size: 13px;
                padding: 12px;
            }

            .payment-history h3 {
                font-size: 16px;
            }

            .payment-history li {
                font-size: 13px;
            }

            .button-container {
                flex-direction: column;
                align-items: stretch;
            }

            .download-btn,
            .update-btn,
            .save-btn {
                width: 100%;
                justify-content: center;
            }
        }

        @media (max-width: 480px) {
            .sidebar {
                width: 180px;
            }

            .main-content {
                margin-left: 180px;
            }

            .header h1 {
                font-size: 18px;
            }

            .excel-table {
                font-size: 12px;
            }

            .excel-table th,
            .excel-table td {
                padding: 10px;
            }

            .search-bar input[type="text"],
            .search-bar button {
                font-size: 13px;
            }
        }
    </style>
</head>

<body>
    <div class="sidebar">
        <div class="logo">
            <img src="https://ik.imagekit.io/7de5cntkw/1692626704665-photoaidcom-cropped%20(1).jpeg?updatedAt=1738048156918"
                alt="Logo">
            Admin Dashboard
        </div>
        <nav>
            <a href="#" class="active">Student Details</a>
            <!-- <a href="#">Reports</a>
            <a href="#">Settings</a>
            <a href="#">Logout</a> -->
        </nav>
    </div>
    <div class="main-content">
        <div class="container">
            <div class="header">
                <h1>Student Details</h1>
            </div>
            <div class="search-bar">
                <label for="student-id">Student ID</label>
                <div class="search-input-container">
                    <input type="text" id="student-id" name="Stdid" placeholder="Enter Student ID">
                    <button type="button" id="search-btn">
                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                        Search
                    </button>
                </div>
            </div>
            <div id="user-details"></div>
            <div class="button-container">
                <button class="download-btn" id="download-statement">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M12 4v12m0 0l-4-4m4 4l4-4M4 20h16" />
                    </svg>
                    Download Statement
                </button>
                <button class="update-btn" id="update-data" style="display: none;">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                    Update Details
                </button>
                <button class="save-btn" id="save-data" style="display: none;">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    Save Changes
                </button>
            </div>
        </div>
    </div>
    <div class="modal" id="modal">
        <div class="modal-content">
            <h3 id="modal-title"></h3>
            <p id="modal-message"></p>
            <button id="modal-close">OK</button>
        </div>
    </div>

    <script>
        let isEditing = false;

        const showModal = (title, message) => {
            const modal = document.getElementById('modal');
            document.getElementById('modal-title').textContent = title;
            document.getElementById('modal-message').textContent = message;
            modal.style.display = 'flex';
        };

        document.getElementById('modal-close').addEventListener('click', () => {
            document.getElementById('modal').style.display = 'none';
        });

        const fetchStudentData = async (Stdid) => {
            if (Stdid === '') {
                document.getElementById('user-details').innerHTML = '';
                document.getElementById('user-details').style.display = 'none';
                document.getElementById('update-data').style.display = 'none';
                document.getElementById('save-data').style.display = 'none';
                isEditing = false;
                return;
            }

            try {
                const response = await fetch('/admin-fetch-data', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ Stdid })
                });

                const data = await response.json();

                if (response.ok) {
                    const formatDate = (isoDate) => {
                        const date = new Date(isoDate);
                        const day = String(date.getDate()).padStart(2, '0');
                        const month = String(date.getMonth() + 1).padStart(2, '0');
                        const year = date.getFullYear();
                        return `${day}-${month}-${year}`;
                    };

                    const paymentHistoryHTML = data.PaymentHistory.map(payment => `
                        <li>Payment Number ${payment.paymentNumber} : â‚¹${payment.amountPaid} on ${formatDate(payment.paymentDate)}</li>
                    `).join('');

                    document.getElementById('user-details').innerHTML = `
                        <table class="excel-table">
                            <tr>
                                <th>Field</th>
                                <th>Details</th>
                            </tr>
                            <tr>
                                <td>Student Name</td>
                                <td data-field="Stdname">${data.Stdname}</td>
                            </tr>
                            <tr>
                                <td>Admitted By</td>
                                <td data-field="StdAdmittedBy">${data.StdAdmittedBy || "N/A"}</td>
                            </tr>
                            <tr>
                                <td>University Name</td>
                                <td data-field="stdUniversityName">${data.stdUniversityName || "N/A"}</td>
                            </tr>
                            <tr>
                                <td>Course</td>
                                <td data-field="Stdcourse">${data.Stdcourse || "N/A"}</td>
                            </tr>
                            <tr>
                                <td>Course Mode</td>
                                <td data-field="stdmode">${data.stdmode || "N/A"}</td>
                            </tr>
                            <tr>
                                <td>Date of Admission</td>
                                <td data-field="stdDateOfAdmission">${data.stdDateOfAdmission || "N/A"}</td>
                            </tr>
                            <tr>
                                <td>Exam Session</td>
                                <td data-field="StdExamSession">${data.StdExamSession || "N/A"}</td>
                            </tr>
                            <tr>
                                <td>Full Course Fee</td>
                                <td data-field="Stdfullfees">â‚¹${data.Stdfullfees}</td>
                            </tr>
                            <tr>
                                <td>Total Paid Fee</td>
                                <td data-field="Stdpaidfee">â‚¹${data.Stdpaidfee}</td>
                            </tr>
                            <tr>
                                <td>Due Fee</td>
                                <td data-field="Stdduefee">â‚¹${data.Stdduefee}</td>
                            </tr>
                            <tr>
                                <td>Fees Breakout</td>
                                <td data-field="stdtotalbreakdetails">${data.stdtotalbreakdetails}</td>
                            </tr>
                        </table>
                        <div class="payment-history">
                            <h3>
                                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                </svg>
                                Payment History
                            </h3>
                            <ul>${paymentHistoryHTML || '<li>No payments recorded yet</li>'}</ul>
                        </div>
                    `;
                    document.getElementById('user-details').style.display = 'block';
                    document.getElementById('update-data').style.display = 'flex';
                    document.getElementById('save-data').style.display = 'none';
                    isEditing = false;
                } else {
                    document.getElementById('user-details').innerHTML = `<p class="error">${data.message}</p>`;
                    document.getElementById('user-details').style.display = 'block';
                    document.getElementById('update-data').style.display = 'none';
                    document.getElementById('save-data').style.display = 'none';
                }
            } catch (error) {
                console.error('Error fetching data:', error);
                document.getElementById('user-details').innerHTML = '<p class="error">Failed to fetch data. Please try again later.</p>';
                document.getElementById('user-details').style.display = 'block';
                document.getElementById('update-data').style.display = 'none';
                document.getElementById('save-data').style.display = 'none';
            }
        };

        document.getElementById('search-btn').addEventListener('click', () => {
            const Stdid = document.getElementById('student-id').value.trim();
            fetchStudentData(Stdid);
        });

        document.getElementById('student-id').addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                event.preventDefault();
                const Stdid = document.getElementById('student-id').value.trim();
                fetchStudentData(Stdid);
            }
        });

        document.getElementById('update-data').addEventListener('click', () => {
            if (!isEditing) {
                isEditing = true;
                document.getElementById('update-data').style.display = 'none';
                document.getElementById('save-data').style.display = 'flex';

                document.querySelectorAll('.excel-table td[data-field]').forEach(cell => {
                    const field = cell.dataset.field;
                    const currentValue = cell.textContent.replace(/â‚¹/g, '').trim();
                    const input = document.createElement('input');
                    input.type = 'text';
                    input.className = 'editable-input';
                    input.value = currentValue;
                    if (field.includes('fee')) {
                        input.type = 'number';
                        input.min = '0';
                        input.step = '0.01';
                    }
                    cell.innerHTML = '';
                    cell.appendChild(input);
                });
            }
        });

        document.getElementById('save-data').addEventListener('click', async () => {
            const Stdid = document.getElementById('student-id').value.trim();
            const updatedData = {};

            let isValid = true;
            document.querySelectorAll('.excel-table td[data-field]').forEach(cell => {
                const input = cell.querySelector('input');
                if (input) {
                    let value = input.value.trim();
                    if (cell.dataset.field.includes('fee')) {
                        const numValue = Number(value);
                        if (isNaN(numValue) || numValue < 0) {
                            input.classList.add('input-error');
                            isValid = false;
                            return;
                        }
                        input.classList.remove('input-error');
                    }
                    updatedData[cell.dataset.field] = value;
                    cell.textContent = cell.dataset.field.includes('fee') ? `â‚¹${value}` : value;
                }
            });

            const fullFees = Number(updatedData.Stdfullfees) || 0;
            const paidFee = Number(updatedData.Stdpaidfee) || 0;
            const dueFee = Number(updatedData.Stdduefee) || 0;
            if (fullFees !== paidFee + dueFee) {
                showModal('Validation Error', 'Full Course Fee must equal Total Paid Fee plus Due Fee.');
                document.querySelectorAll('.excel-table td[data-field="Stdfullfees"] input, .excel-table td[data-field="Stdpaidfee"] input, .excel-table td[data-field="Stdduefee"] input').forEach(input => {
                    input.classList.add('input-error');
                });
                return;
            }

            if (!isValid) {
                showModal('Validation Error', 'Please correct invalid inputs (numeric fields must be non-negative numbers).');
                return;
            }

            try {
                const response = await fetch('/admin-update-data', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ Stdid, ...updatedData })
                });

                const result = await response.json();
                if (response.ok) {
                    const successMessage = document.createElement('div');
                    successMessage.className = 'success-message';
                    successMessage.textContent = 'Data updated successfully!';
                    document.getElementById('user-details').prepend(successMessage);

                    setTimeout(() => {
                        successMessage.style.opacity = '0';
                        successMessage.style.transform = 'translateY(-10px)';
                        setTimeout(() => successMessage.remove(), 300);
                    }, 3000);

                    isEditing = false;
                    document.getElementById('update-data').style.display = 'flex';
                    document.getElementById('save-data').style.display = 'none';
                } else {
                    showModal('Update Failed', `Failed to update data: ${result.message}`);
                    document.querySelectorAll('.excel-table td[data-field]').forEach(cell => {
                        const field = cell.dataset.field;
                        const input = document.createElement('input');
                        input.type = field.includes('fee') ? 'number' : 'text';
                        input.className = 'editable-input';
                        input.value = cell.textContent.replace(/â‚¹/g, '').trim();
                        if (field.includes('fee')) input.step = '0.01';
                        cell.innerHTML = '';
                        cell.appendChild(input);
                    });
                }
            } catch (error) {
                console.error('Error updating data:', error);
                showModal('Update Failed', 'Failed to update data. Please try again later.');
                document.querySelectorAll('.excel-table td[data-field]').forEach(cell => {
                    const field = cell.dataset.field;
                    const input = document.createElement('input');
                    input.type = field.includes('fee') ? 'number' : 'text';
                    input.className = 'editable-input';
                    input.value = cell.textContent.replace(/â‚¹/g, '').trim();
                    if (field.includes('fee')) input.step = '0.01';
                    cell.innerHTML = '';
                    cell.appendChild(input);
                });
            }
        });

        document.getElementById('download-statement').addEventListener('click', () => {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({
                orientation: 'portrait',
                unit: 'mm',
                format: 'a4'
            });
            const details = document.getElementById('user-details');

            if (details.style.display === 'block') {
                doc.setFontSize(16);
                doc.setFont("helvetica", "bold");
                doc.setTextColor(0, 0, 0);
                doc.text("Student Data Statement", 14, 20);

                const rows = document.querySelectorAll('.excel-table tr');
                const tableData = Array.from(rows).slice(1).map(row => {
                    const cells = row.querySelectorAll('td');
                    return [
                        cells[0].textContent,
                        cells[1].textContent.replace(/â‚¹/g, '')
                    ];
                });

                doc.autoTable({
                    startY: 30,
                    head: [['Field', 'Details']],
                    body: tableData,
                    theme: 'striped',
                    headStyles: {
                        fillColor: [30, 58, 138],
                        textColor: [255, 255, 255],
                        fontSize: 12,
                        fontStyle: 'bold',
                        font: "helvetica"
                    },
                    bodyStyles: {
                        fontSize: 11,
                        textColor: [0, 0, 0],
                        font: "helvetica"
                    },
                    alternateRowStyles: {
                        fillColor: [249, 250, 251]
                    },
                    margin: { left: 14, right: 14 },
                    tableWidth: 'auto',
                    styles: {
                        font: "helvetica",
                        lineWidth: 0.2,
                        lineColor: [229, 231, 235]
                    }
                });

                const ul = details.querySelector('.payment-history ul');
                if (ul) {
                    doc.setFontSize(14);
                    doc.setFont("helvetica", "bold");
                    doc.setTextColor(0, 0, 0);
                    doc.text("Payment History", 14, doc.lastAutoTable.finalY + 10);

                    const paymentData = Array.from(ul.children).map(li => {
                        const text = li.textContent;
                        const [prefix, rest] = text.split(': ');
                        const [amount, date] = rest.split(' on ');
                        return [prefix.replace('Student ', ''), amount.replace(/â‚¹/g, ''), date];
                    });

                    doc.autoTable({
                        startY: doc.lastAutoTable.finalY + 15,
                        head: [['Payment No.', 'Amount', 'Date']],
                        body: paymentData.length > 0 ? paymentData : [['-', 'No payments recorded yet', '-']],
                        theme: 'striped',
                        headStyles: {
                            fillColor: [30, 58, 138],
                            textColor: [255, 255, 255],
                            fontSize: 12,
                            fontStyle: 'bold',
                            font: "helvetica"
                        },
                        bodyStyles: {
                            fontSize: 11,
                            textColor: [0, 0, 0],
                            font: "helvetica"
                        },
                        alternateRowStyles: {
                            fillColor: [249, 250, 251]
                        },
                        margin: { left: 14, right: 14 },
                        tableWidth: 'auto',
                        styles: {
                            font: "helvetica",
                            lineWidth: 0.2,
                            lineColor: [229, 231, 235]
                        },
                        columnStyles: {
                            0: { cellWidth: 30 },
                            1: { cellWidth: 40 },
                            2: { cellWidth: 'auto' }
                        }
                    });
                }

                const studentId = document.getElementById('student-id').value.trim();
                doc.save(`student-statement-${studentId || 'unknown'}.pdf`);
            } else {
                showModal('Download Error', 'Please enter a Student ID to download the statement.');
            }
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js"></script>
</body>

</html>