// Import required modules
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const session = require('express-session');

// Initialize Express app
const app = express();
const PORT = 3000;

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(session({
  secret: 'secretKey',
  resave: false,
  saveUninitialized: true
}));

// MongoDB connection
mongoose.connect('mongodb://127.0.0.1:27017/studentDB', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));

// Define Mongoose schemas and models
const studentSchema = new mongoose.Schema({
  id: String,
  name: String,
  course: String,
  payment: Number
});
const Student = mongoose.model('Student', studentSchema);

const DEFAULT_USERNAME = 'user';
const DEFAULT_PASSWORD = 'password';
const ADMIN_USERNAME = 'admin';
const ADMIN_PASSWORD = 'admin123';

// Routes
app.get('/', (req, res) => {
  res.send(`
    <h1>Login</h1>
    <form action="/login" method="POST">
      <label>Username:</label>
      <input type="text" name="username" required />
      <label>Password:</label>
      <input type="password" name="password" required />
      <button type="submit">Login</button>
    </form>
  `);
});

app.post('/login', (req, res) => {
  const { username, password } = req.body;

  if (username === DEFAULT_USERNAME && password === DEFAULT_PASSWORD) {
    req.session.user = 'accountant';
    res.redirect('/accountant');
  } else if (username === ADMIN_USERNAME && password === ADMIN_PASSWORD) {
    req.session.user = 'admin';
    res.redirect('/admin');
  } else {
    res.send('<h1>Invalid credentials</h1>');
  }
});

app.get('/accountant', (req, res) => {
  if (req.session.user !== 'accountant') return res.redirect('/');

  res.send(`
    <h1>Money Receipt Form</h1>
    <form action="/add-student" method="POST">
      <label>ID:</label>
      <input type="text" name="id" required />
      <label>Name:</label>
      <input type="text" name="name" required />
      <label>Course:</label>
      <input type="text" name="course" required />
      <label>Payment:</label>
      <input type="number" name="payment" required />
      <button type="submit">Submit</button>
    </form>
  `);
});

app.post('/add-student', async (req, res) => {
  if (req.session.user !== 'accountant') return res.redirect('/');

  const { id, name, course, payment } = req.body;
  const newStudent = new Student({ id, name, course, payment });

  try {
    await newStudent.save();
    res.send('<h1>Student record added successfully</h1>');
  } catch (error) {
    res.status(500).send('<h1>Error saving record</h1>');
  }
});

app.get('/admin', (req, res) => {
  if (req.session.user !== 'admin') return res.redirect('/');

  res.send(`
    <h1>Search Student</h1>
    <form action="/search-student" method="POST">
      <label>Student ID:</label>
      <input type="text" name="id" required />
      <button type="submit">Search</button>
    </form>
  `);
});

app.post('/search-student', async (req, res) => {
  if (req.session.user !== 'admin') return res.redirect('/');

  const { id } = req.body;

  try {
    const student = await Student.findOne({ id });
    if (student) {
      res.send(`
        <h1>Student Details</h1>
        <p>Name: ${student.name}</p>
        <p>Course: ${student.course}</p>
        <p>Payment: ${student.payment}</p>
      `);
    } else {
      res.send('<h1>Student not found</h1>');
    }
  } catch (error) {
    res.status(500).send('<h1>Error fetching record</h1>');
  }
});

// Start the server
app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));




//////////////////////////////////////////////////////////////////////////////////

 <div class="form-group" id="paymentNum">
    <label for="paymentNum" class="paymentNum">Payment Number</label>
    <select id="id" name="stdpaymentnumber" required>
        <option value="" disabled selected>Select payment number</option>
        <option value="1">1st Payment</option>
        <option value="2">2nd Payment</option>
        <option value="3">3rd Payment</option>
        <option value="4">4th Payment</option>
        <option value="5">5th Payment</option>
        <option value="6">6th Payment</option>
        <option value="7">7th Payment</option>
        <option value="8">8th Payment</option>
        <option value="9">9th Payment</option>
        <option value="10">10th Payment</option>
        <option value="11">11th Payment</option>
        <option value="12">12th Payment</option>
        <option value="13">13th Payment</option>
        <option value="14">14th Payment</option>
        <option value="15">15th Payment</option>
        <option value="16">16th Payment</option>
        <option value="17">17th Payment</option>
        <option value="18">18th Payment</option>
        <option value="19">19th Payment</option>
        <option value="20">20th Payment</option>
        <option value="21">21th Payment</option>
        <option value="22">22th Payment</option>
        <option value="23">23th Payment</option>
        <option value="24">24th Payment</option>
        <option value="25">25th Payment</option>
        <option value="26">26th Payment</option>
        <option value="27">27th Payment</option>
        <option value="28">28th Payment</option>
        <option value="29">29th Payment</option>
        <option value="30">30th Payment</option>
    </select>
</div>







////////////////////////////////////////////////////////////////////////

  <div class="form-group" id="paymentNum">
            <label for="paymentNum" class="paymentNum">Payment Number</label>
            <input type="text" id="id" name="stdpaymentnumber" placeholder="Enter payment no." required>
        </div>

